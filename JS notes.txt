JS notes


alert()

Debugging
console.log()

Declaring variables
var abc=9;      // terminated by semicolon

changing text in an element 
document.getElementById("demo").innerHTML = "Hello Dolly."; 


keywords (reserved)
break, while, do..while, for, if..else, function, return, switch

fixed values :- literals   e.g. 1000, 10.1, "hello"
 variable values :- variables, declared using var keyword


Syntax

Operators
 Arithmetic :- +,-,*,/, ** (exponetiation), % (modulus/remainder), ++ , --
 Assignment :- =, +=, -=, <<= ,etc.

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).
And the precedence can be changed by using parentheses:
When many operations have the same precedence (like addition and subtraction), they are computed from left to right: 

 JavaScript Comparison Operators
 Operator 	Description
	== 	equal to   5=="5" returns true
	=== 	equal value and equal type 5=="5" returns false
	!= 	not equal
	!== 	not equal value or not equal type
	> 	greater than
	< 	less than
	>= 	greater than or equal to
	<= 	less than or equal to
	? 	ternary operator

JavaScript Logical Operators
Operator 	Description
&& 	logical and
|| 	logical or
! 	logical not

JavaScript Type Operators
Operator 	Description
typeof 	Returns the type of a variable
instanceof 	Returns true if an object is an instance of an object type

JavaScript Bitwise Operators

Bit operators work on 32 bits numbers.
Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.
Operator 	Description 	Example 	Same as 	Result 	Decimal
& 	AND 	5 & 1 	0101 & 0001 	0001 	 1
| 	OR 	5 | 1 	0101 | 0001 	0101 	 5
~ 	NOT 	~ 5 	 ~0101 	1010 	 10
^ 	XOR 	5 ^ 1 	0101 ^ 0001 	0100 	 4
<< 	Zero fill left shift 	5 << 1 	0101 << 1 	1010 	 10
>> 	Signed right shift 	5 >> 1 	0101 >> 1 	0010 	  2
>>> Zero fill right shift 	5 >>> 1 	0101 >>> 1 	0010 	  2

 Expressions :-  a+b

 // single line comment

 /*
MULTI LINE 
COMMENT
 */

 identifiers :-  used to name variables (and keywords, and functions, and labels). 
 identifiers are case sensitive.

 The general rules for constructing names for variables (unique identifiers) are:

    Names can contain letters, digits, underscores, and dollar signs.
    Names must begin with a letter
    Names can also begin with $ and _ (but we will not use it in this tutorial)
    Names are case sensitive (y and Y are different variables)
    Reserved words (like JavaScript keywords) cannot be used as names

After the declaration, the variable has no value (technically it has the value of undefined).
To assign a value to the variable, use the equal sign  

If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated. (othere than the expression coming before it)

The + operator can also be used to add (concatenate) strings.

The typeof operator can return one of these primitive types:

    string
    number
    boolean
    undefined

The typeof operator can return one of two complex types:

    function
    object

null -> object data type


FUNCTIONS
Accessing a function without () will return the function definition instead of the function result:

Variables declared within a JavaScript function, become LOCAL to the function.

Local variables can only be accessed from within the function.


JS OBJECTS
Objects are variables too. But objects can contain many values.

This code assigns many values (Fiat, 500, white) to a variable named car:
var car = {type:"Fiat", model:"500", color:"white"};

You can access object properties in two ways:
objectName.propertyName
or
objectName["propertyName"]


Common HTML Events
Event 	Description
onchange 	An HTML element has been changed
onclick 	The user clicks an HTML element
onmouseover 	The user moves the mouse over an HTML element
onmouseout 	The user moves the mouse away from an HTML element
onkeydown 	The user pushes a keyboard key
onload 	The browser has finished loading the page

Event handlers can be used to handle, and verify, user input, user actions, and browser actions:

    Things that should be done every time a page loads
    Things that should be done when the page is closed
    Action that should be performed when a user clicks a button
    Content that should be verified when a user inputs data
    And more ...

Many different methods can be used to let JavaScript work with events:

    HTML event attributes can execute JavaScript code directly
    HTML event attributes can call JavaScript functions
    You can assign your own event handler functions to HTML elements
    You can prevent events from being sent or being handled
    And more ...


String Methods and Properties
To find the length of a string, use the built-in length property: e.g. var name="Mike"; name.length is 4
The indexOf() method returns the index of (the position of) the first occurrence of a specified text in a string:
Example
var str = "Please locate where 'locate' occurs!";
var pos = str.indexOf("locate"); // returns 7

The lastIndexOf() method returns the index of the last occurrence of a specified text in a string:

Both indexOf(), and lastIndexOf() return -1 if the text is not found.

The search() method searches a string for a specified value and returns the position of the match:

The two methods, indexOf() and search(), are equal?

They accept the same arguments (parameters), and return the same value?

The two methods are NOT equal. These are the differences:

    The search() method cannot take a second start position argument.
    The indexOf() method cannot take powerful search values (regular expressions).

A string is converted to upper case with toUpperCase()
Example
var text1 = "Hello World!";       // String
var text2 = text1.toUpperCase();

A string is converted to lower case with toLowerCase():

concat() joins two or more strings:
Example
var text1 = "Hello";
var text2 = "World";
var text3 = text1.concat(" ", text2);

The trim() method removes whitespace from both sides of a string:

A string can be converted to an array with the split() method:
Example
var txt = "a,b,c,d,e";   // String
txt.split(",");          // Split on commas
txt.split(" ");          // Split on spaces
txt.split("|");          // Split on pipe 






Creating an Array

Using an array literal is the easiest way to create a JavaScript Array.

Syntax:
var array_name = [item1, item2, ...];      
Example
var cars = ["Saab", "Volvo", "BMW"]; 

Using the JavaScript Keyword new

The following example also creates an Array, and assigns values to it:
Example
var cars = new Array("Saab", "Volvo", "BMW");

Adding Array Elements

The easiest way to add a new element to an array is using the push() method:
Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Lemon");    // adds a new element (Lemon) to fruits

New element can also be added to an array using the length property:
Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Lemon";    // adds a new element (Lemon) to fruits 

JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.

1. Alert Box

An alert box is often used if you want to make sure information comes through to the user.

When an alert box pops up, the user will have to click "OK" to proceed.
Syntax
window.alert("sometext");

The window.alert() method can be written without the window prefix.
Example
alert("I am an alert box!");

2. Confirm Box

A confirm box is often used if you want the user to verify or accept something.

When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.

If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.
Syntax
window.confirm("sometext");

The window.confirm() method can be written without the window prefix.
Example
if (confirm("Press a button!")) {
  txt = "You pressed OK!";
} else {
  txt = "You pressed Cancel!";
}

3. Prompt Box

A prompt box is often used if you want the user to input a value before entering a page.

When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value.

If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.
Syntax
window.prompt("sometext","defaultText");

The window.prompt() method can be written without the window prefix.
Example
var person = prompt("Please enter your name", "Harry Potter");

if (person == null || person == "") {
  txt = "User cancelled the prompt.";
} else {
  txt = "Hello " + person + "! How are you today?";
} 







You can also break up a code line within a text string with a single backslash:
Example
document.getElementById("demo").innerHTML = "Hello \
Dolly!";



